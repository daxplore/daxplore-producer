package gui.importwizard;

import java.awt.Cursor;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;

import javax.swing.JOptionPane;

import daxplorelib.DaxploreException;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class ImportWizardController implements ActionListener {
    
	private ImportWizardDialog hostPanel;
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public ImportWizardController(ImportWizardDialog w) {
    	this.hostPanel = w;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        
        if (evt.getActionCommand().equals(ImportWizardDialog.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(ImportWizardDialog.BACK_BUTTON_ACTION_COMMAND))
			backButtonPressed();
		else if (evt.getActionCommand().equals(ImportWizardDialog.NEXT_BUTTON_ACTION_COMMAND))
			nextButtonPressed();
    }
    
	/**
	 * Action command for cancel button in the wizard dialog.
	 */
    private void cancelButtonPressed() {
    	
    	// clear the spss file save just in case, when the dialog opens again we don't
    	// want an old file saved in the system.
        hostPanel.getGuiMain().getGuiFile().resetSpssFile();
        
        hostPanel.close(ImportWizardDialog.CANCEL_RETURN_CODE);
    }

    /**
	 * Action command for next button in the wizard dialog.
	 */
    private void nextButtonPressed() {
 
        ImportWizardModel model = hostPanel.getModel();
        ImportWizardDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (nextPanelDescriptor instanceof ImportWizardDescriptor.FinishIdentifier) {
            hostPanel.close(ImportWizardDialog.FINISH_RETURN_CODE);
        } else {        
            hostPanel.setCurrentPanel(nextPanelDescriptor);
        }
        
    }

    /**
	 * Action command for back button in the wizard dialog.
	 */
    private void backButtonPressed() {
 
        ImportWizardModel model = hostPanel.getModel();
        ImportWizardDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();        
        hostPanel.setCurrentPanel(backPanelDescriptor);
        
    }

    public void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        ImportWizardModel model = hostPanel.getModel();
        ImportWizardDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(ImportWizardDialog.CANCEL_TEXT);
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        
        model.setBackButtonText(ImportWizardDialog.BACK_TEXT);
        
        if (descriptor.getBackPanelDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);
 
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        
        if (descriptor.getNextPanelDescriptor() instanceof ImportWizardDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(ImportWizardDialog.FINISH_TEXT);
        } else {
            model.setNextFinishButtonText(ImportWizardDialog.NEXT_TEXT);
        }
    }
    
    /**
     * Handles spss file import 
     */
	public void importSpssFileAction() {

		// this should never happen the way the dialog is designed. But we keep this for safety.
		if (hostPanel.getGuiMain().getGuiFile().getSpssFile() == null) {
			JOptionPane.showMessageDialog(this.hostPanel.getGuiMain().getMainFrame(),
					"You must open an SPSS file before you can import it.",
					"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			return;

		}

		if (hostPanel.getGuiMain().getGuiFile().getDaxploreFile() == null) {
			JOptionPane
					.showMessageDialog(
							this.hostPanel.getGuiMain().getMainFrame(),
							"Create or open a daxplore project file before you import an SPSS file.",
							"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		// charsets are stored in the wizard model. Retrieve it from there.
		Charset charset;
		try {
			charset = Charset.forName(hostPanel.getModel().getCharsetName());
		} catch (Exception e1) {
			JOptionPane.showMessageDialog(this.hostPanel.getGuiMain().getMainFrame(),
					"Unable to create charset, aborting import.",
					"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			return;
		}

		File importFile = hostPanel.getGuiMain().getGuiFile().getSpssFile();

		try {
			
			// show the wait cursor in case the import takes a long time.
			hostPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			hostPanel.getGuiMain().getGuiFile().getDaxploreFile().importSPSS(importFile, charset);

			// NOTE: Information on successful file import is updated elsewhere.

		} catch (FileNotFoundException e2) {
			JOptionPane.showMessageDialog(this.hostPanel.getGuiMain().getMainFrame(),
					"Unable to find the SPSS file.", "Daxplore file warning",
					JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
			return;
		} catch (IOException e2) {
			JOptionPane.showMessageDialog(this.hostPanel.getGuiMain().getMainFrame(),
					"File import error.", "Daxplore file warning",
					JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
			return;
		} catch (DaxploreException e2) {
			JOptionPane.showMessageDialog(this.hostPanel.getGuiMain().getMainFrame(),
					"Unable to import file, aborting operation.",
					"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
			return;
		}
	}
}