package gui.controller;

import gui.GUIFile;
import gui.GUIMain;
import gui.model.ImportWizardDescriptorNotFoundException;
import gui.model.ImportWizardModel;
import gui.view.ImportWizardDialog;
import gui.view.OpenPanelView;

import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.*;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;

import org.opendatafoundation.data.FileFormatInfo;
import org.opendatafoundation.data.FileFormatInfo.ASCIIFormat;
import org.opendatafoundation.data.FileFormatInfo.Compatibility;
import org.opendatafoundation.data.spss.SPSSFile;
import org.opendatafoundation.data.spss.SPSSFileException;
import org.opendatafoundation.data.spss.SPSSVariable;

import daxplorelib.DaxploreException;

import tools.SPSSTools;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class ImportWizardController implements ActionListener {
    
    private GUIMain guiMain;
	private ImportWizardDialog hostPanel;
    private GUIFile guiFile;
    
    // TODO: To be implemented: user should be able to choose which charset is to be used based on string information.
 	public String charsetName = "ISO-8859-1";
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public ImportWizardController(GUIMain guiMain, ImportWizardDialog w, GUIFile guiFile) {
        this.guiMain = guiMain;
    	this.hostPanel = w;
        this.guiFile = guiFile;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        
        if (evt.getActionCommand().equals(ImportWizardDialog.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(ImportWizardDialog.BACK_BUTTON_ACTION_COMMAND))
			backButtonPressed();
		else if (evt.getActionCommand().equals(ImportWizardDialog.NEXT_BUTTON_ACTION_COMMAND))
			nextButtonPressed();
		else if (evt.getActionCommand().equals(ImportWizardDialog.OPEN_SPSS_FILE_ACTION_COMMAND))
            openSpssFileAction();
        else if (evt.getActionCommand().equals(ImportWizardDialog.ENCODING_COMBO_BOX_ACTION))
            charsetComboBoxAction(evt);
        else if (evt.getActionCommand().equals(ImportWizardDialog.IMPORT_SPSS_FILE_ACTION))
            importSpssFileAction();
        
    }
    
	public void importSpssFileAction() {

		if (guiFile.getSpssFile() == null) {
			JOptionPane.showMessageDialog(this.guiMain.getGuiMainFrame(),
					"You must open an SPSS file before you can import it.",
					"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			return;

		}

		if (guiFile.getDaxploreFile() == null) {
			JOptionPane
					.showMessageDialog(
							this.guiMain.getGuiMainFrame(),
							"Create or open a daxplore project file before you import an SPSS file.",
							"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			return;
		}

		Charset charset;
		try {
			charset = Charset.forName(charsetName);
		} catch (Exception e1) {
			JOptionPane.showMessageDialog(this.guiMain.getGuiMainFrame(),
					"Unable to create charset, aborting import.",
					"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			return;
		}

		File importFile = guiFile.getSpssFile();

		try {
			// importSpssFileButton.setEnabled(false); // TODO: Update it for
			// the wizard.
			guiMain.getGuiMainFrame().setCursor(
					Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			guiFile.getDaxploreFile().importSPSS(importFile, charset);

			// update open panel text fields to ensure the latest file updates
			// are displayed
			// after a successful spss import.
			//openPanelView.updateTextFields(guiFile);
			//openPanelView.spssFileInfoText
			//		.setText(openPanelView.spssFileInfoText.getText()
			//				+ "\nSPSS file successfully imported!");

		} catch (FileNotFoundException e2) {
			JOptionPane.showMessageDialog(this.guiMain.getGuiMainFrame(),
					"Unable to find the SPSS file.", "Daxplore file warning",
					JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
			return;
		} catch (IOException e2) {
			JOptionPane.showMessageDialog(this.guiMain.getGuiMainFrame(),
					"File import error.", "Daxplore file warning",
					JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
			return;
		} catch (DaxploreException e2) {
			JOptionPane.showMessageDialog(this.guiMain.getGuiMainFrame(),
					"Unable to import file, aborting operation.",
					"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
			return;
		}
	}

    public void openSpssFileAction() {
		JFileChooser fc = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
				"SPSS Files", "sav");
		fc.setFileFilter(filter);

		int returnVal = fc.showOpenDialog(this.hostPanel);

		if (returnVal == JFileChooser.APPROVE_OPTION) {

			File file = fc.getSelectedFile();
			System.out.println("Opening file: " + file.getName() + ".");

			// import SPSS file.
			try {
				SPSSFile spssFile = new SPSSFile(file, "r");
				spssFile.logFlag = false;
				spssFile.loadMetadata();
				spssFile.close();
				
				guiFile.setSpssFile(file);
				String text = "File selected: " + guiFile.getSpssFile().getName();
				hostPanel.setSpssFileInfoText(text);
				
			} catch (FileNotFoundException e1) {
				System.out.println("SPSS file open failed.");
				JOptionPane.showMessageDialog(this.hostPanel,
						"You must select a valid SPSS file.",
						"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (SPSSFileException e1) {
				System.out.println("Not a valid SPSS file.");
				JOptionPane.showMessageDialog(this.hostPanel,
						"You must select a valid SPSS file.",
						"Daxplore file warning", JOptionPane.ERROR_MESSAGE);
				e1.printStackTrace();
			}
		}
	}
    
    public void charsetComboBoxAction(ActionEvent e) {
		if(!(e.getSource() instanceof JComboBox)) {
			return;
		}
		JComboBox charsetSource = (JComboBox) e.getSource();
		
		String charsetType = (String) charsetSource.getSelectedItem();
		
		if(charsetType != null && !charsetType.equals("") && guiFile.getSpssFile() != null) {
			Charset charset = Charset.forName(charsetType);
			DefaultComboBoxModel stringList = new DefaultComboBoxModel();
			try {
				Set<String> encodedStrings = SPSSTools.getNonAsciiStrings(guiFile.getSpssFile(), charset);
				
				for (String es: encodedStrings) {
					stringList.addElement(es);
				}
				
				JList encodedStringsList = new JList(stringList);
				
				charsetName = charset.name();
				hostPanel.setEncodingList(encodedStringsList);
			} catch (Exception e1) {
				JOptionPane.showMessageDialog(this.hostPanel,
						"That encoding type is not supported.",
						"Encoding error", JOptionPane.ERROR_MESSAGE);
				e1.printStackTrace();
			}
		}
	}
         
    private void cancelButtonPressed() {
        
        hostPanel.close(ImportWizardDialog.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() {
 
        ImportWizardModel model = hostPanel.getModel();
        ImportWizardDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (nextPanelDescriptor instanceof ImportWizardDescriptor.FinishIdentifier) {
            hostPanel.close(ImportWizardDialog.FINISH_RETURN_CODE);
        } else {        
            hostPanel.setCurrentPanel(nextPanelDescriptor);
        }
        
    }

    private void backButtonPressed() {
 
        ImportWizardModel model = hostPanel.getModel();
        ImportWizardDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();        
        hostPanel.setCurrentPanel(backPanelDescriptor);
        
    }

    public void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        ImportWizardModel model = hostPanel.getModel();
        ImportWizardDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(ImportWizardDialog.CANCEL_TEXT);
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        
        model.setBackButtonText(ImportWizardDialog.BACK_TEXT);
        
        if (descriptor.getBackPanelDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);
 
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        
        if (descriptor.getNextPanelDescriptor() instanceof ImportWizardDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(ImportWizardDialog.FINISH_TEXT);
        } else {
            model.setNextFinishButtonText(ImportWizardDialog.NEXT_TEXT);
        }
        
    }
    
    /**
	 * Creates a temporary file on disc and imports SPSS file information as well as outputs it to a table display.
	 * @param sf
	 * @return TableColumn
	 */
	public TableColumn SPSSTable(SPSSFile sf) {
		File temp;
		FileFormatInfo ffi = new FileFormatInfo();
		ffi.namesOnFirstLine = false;
		ffi.asciiFormat = ASCIIFormat.CSV;
		ffi.compatibility = Compatibility.GENERIC;
		BufferedReader br = null;
		
		JTable table = null;
		
		try {
			sf.logFlag = false;
			sf.loadMetadata();
			temp = File.createTempFile("spsscsv", ".csv.tmp");
			sf.exportData(temp, ffi);
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		} catch (SPSSFileException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
		String[] columns = new String[sf.getVariableCount()];
		Object[][] data = new Object[sf.getRecordCount()][sf.getVariableCount()];
		for(int i = 0; i < sf.getVariableCount(); i++){
			SPSSVariable var = sf.getVariable(i);
			columns[i] = var.getShortName();
			System.out.print(sf.getVariable(i).getShortName() + ", ");
		}

		try {
			br = new BufferedReader(new FileReader(temp));
			String line;
			int l = 0;
			while((line = br.readLine()) != null){
				StringTokenizer st = new StringTokenizer(line, ",");
				int c = 0;
				while(st.hasMoreTokens()){
					data[l][c] = st.nextToken();
					c++;
				}
				l++;
			}
		} catch (FileNotFoundException e) {
			System.out.println("FileNotFoundException");
			e.printStackTrace();
			
		} catch (IOException e) {
			System.out.println("IOException");
			System.out.print(e.toString());
			e.printStackTrace();
		}
		
		// disallow editing of table fields through this model.
		/* TableModel model = new TableModel(data, columns) {
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int rowIndex, int mColIndex) {
		        return false;
		      }
		    }; */
		TableColumn column = new TableColumn();
		for (int i = 0; i < 5; i++) {
			column = table.getColumnModel().getColumn(i);
			column.setPreferredWidth(50);
		}
		return column;
	}
}